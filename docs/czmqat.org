#+title Yet another ZeroMQ netcatish program

* Introduction

The program ~czmqat~ provides yet another program vaguely like ~netcat~
using ZeroMQ sockets.  It requires CZMQ and the included ~CLI11.h~.  

It may receive messages from an input socket and send on an output
socket.  Input or output messages may also be read from or written to
a file.  The command line options allow the user to set ZeroMQ socket
type, endpoints, HWM, bind vs connect and subscriptions if a SUB is
used (default is subscribe to all).  Input and output filenames can
also be set.  See below for file format, but it's effectively opaque
data.

* Documentation

Besides this document, command line help exists thanks to ~CLI11~.

#+BEGIN_EXAMPLE
  $ czmqat -h
#+END_EXAMPLE

The "subcommands" are used to delimit options.  They also have a help
flag.  Eg

#+BEGIN_EXAMPLE
  $ czmqat -h isock
#+END_EXAMPLE

* Examples

** Receiving

Have ~czmqat~ receive messages over a PULL socket and dump them out to file.

#+BEGIN_EXAMPLE
  $ czmqat isock -p PULL -a connect -e tcp://127.0.0.1:5550 ofile -f junk.dump
#+END_EXAMPLE

The PTMP ~check_send_rates~ test application can be used to provide some messages.

#+BEGIN_EXAMPLE
  $ ./build/test/check_send_rates -E 10000 -d 0 -m 10 -p PUSH -a bind -e tcp://127.0.0.1:5550 -B 1000 -n 10000 -N 1000 uniform -t 10
#+END_EXAMPLE

Note, that when ~czmqat~ receives from a socket an interrupt (Ctrl-c) is required to terminate it.

** Sending

The dumped file may be played back by ~czmqat~.

#+BEGIN_EXAMPLE
  $ czmqat -E 1000 osock -m 10000 -p PUSH -a bind -e tcp://127.0.0.1:5550 ifile -f junk-sub.dump 
#+END_EXAMPLE

The ~check_recv~ test can be used to sink the messages.

#+BEGIN_EXAMPLE
  $ ./build/test/check_recv  -n 10000 -p PULL -a connect -e tcp://127.0.0.1:5550
#+END_EXAMPLE

Note that the ~-E~ option is used to keep ~czmqat~ running after the file has been exhausted so as to give enough time to the receiver to finish.  Without this wait, ~czmqat~ will exit immediately leaving unsent messages in the ZeroMQ buffer. 

** Proxying

As ~czmqat~ can both send and receive it may also be used as a proxy such as for translating between transports or socket types.  Here is an example using ~czmqat~ to join the two test programs above.  Each should be run from a different shell

#+BEGIN_EXAMPLE
  $ czmqat isock -p SUB -a connect -e tcp://127.0.0.1:5550 osock -p PUSH -a bind -e tcp://127.0.0.1:5551
  $ ./build/test/check_recv -n 10000 -p PULL -a connect -e tcp://127.0.0.1:5551
  $ ./build/test/check_send_rates -E 10000 -d 0 -m 10 -p PUB -a bind -e tcp://127.0.0.1:5550 -B 1000 -n 10000 -N 1000 uniform -t10
#+END_EXAMPLE

Note, as PUB/SUB follows "drop" policy, start the publisher last or it may otherwise immediately expend its messages.

* File format

The file format is very simple, binary and not particularly portable.  Each message is serialized with an 8 byte integer prefix giving the size in bytes of the next message.  The message data is a ~zmsg_t~ that has been encoded to a ~zframe_t~ and then unpacked into a ~zchunk_t~.  No idea what that means at the bit level, but it is what it is.

|---------+----------|
| bytes   | what     |
|---------+----------|
| 8       | size1    |
|---------+----------|
|         |          |
| [size1] | message1 |
|         |          |
|---------+----------|
| 8       | size2    |
|---------+----------|
|         |          |
| [size2] | message2 |
|         |          |
|---------+----------|
| ...     | ...      |
|---------+----------|

