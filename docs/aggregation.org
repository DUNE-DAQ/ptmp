#+title: PTMP Aggregation

PTMP is designed to not dictate how its components may be used in a
larger context.  Instead, the application developer or even end user
may aggregate PTMP components in ways that solve whatever external
needs they may have.  Here, some guidance is provided.

* Aggregation contexts

PTMP components (by nature of ZeroMQ) may be aggregated in three broad
contexts using (at least) the listed ZeroMQ transports.  Sockets may
exist in the same:

- executable :: ~inproc://~, ~ipc://~, ~tcp://~
- computer ::  ~ipc://~, ~tcp://~
- network ::  ~tcp://~

When a choice is available given other constraints, [[http://wiki.zeromq.org/area:results][benchmarks]] can
help decide which to use.  Selecting different message transport in
PTMP is a matter of changing end-user configuration.  No need to
modify code.

* Aggregation strategies

Some considerations for deciding how to aggregate

** Same executable

- Aggregation may done by writing code that hard-wires the
  construction of some PTMP [[../inc/ptmp/api.h][API]] classes or user code based on them.

- Configuration-driven dynamic aggregation of PTMP [[actors.org][actor]] classes into
  an application can be used by construing a ~TPComposer~ or from the
  command line using [[ptmper.org][ptmper]].  Or, user code may utilize PTMP's lower
  level [[factory.org][factory method]] to dynamically instantiate components,
  potentially from [[plugin.org][plugin]] shared libraries.

- Executable can elect to hide some structure by hard-wiring
  configuration related to "internal" connections between components.

- Can use all transport methods.

- Load is limited by available CPU cores on the physical host

** Same computer

- Aggregation is done by starting individual programs and valid
  configuration of endpoint addresses.

- Programs may be developed independently and in different languages.

- Functionality is spread over more executables (than "same
  executable") so managing program lifetime requires more effort.

- Can not use ~inproc://~ transport

- Load is limited by available CPU cores on the physical host

** Same network

- Aggregation is done by starting individual programs on multiple host computers.  

- Programs may be developed independently and in different languages.

- Functionality is spread over more executables and host computers so
  managing program lifetime requires yet more effort.

- Can only use ~tcp://~ transport (PTMP does not yet support all ZeroMQ
  network transports).

- Load is limited by available CPU cores across multiple physical hosts

- Network congestion may pose issues

- Network security may need consideration (ZeroMQ CURVE could be used).

