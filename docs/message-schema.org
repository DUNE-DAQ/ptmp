#+title PTMP Message Schema

* Schema description

PTMP messages are ZeroMQ messages.  

Currently a message consists of two ZeroMQ frames:

1. an "ID" frame, currently unused except that it holds a ~0~ value and
   serves as a PUB/SUB "topic".  Its existence is currently not
   exposed to PTMP client code.
2. a serialized representation of a ~TPSet~ object.  Serialization is
   performed by protobuf according to the schema held [[../ptmp/ptmp.proto][here]].

* ~TPSet~

The main payload message type in PTMP is the ~TPSet~ and is defined in
[[./ptmp/ptmp.proto]] which is in "protobuf" description language.  This
is used to generate class implementations which are available to the
application with

#+BEGIN_SRC c++
#include "ptmp/data.h"
#+END_SRC

** Time values

~TPSet~ and its constituent ~TrigPrim~ objects have three time related
attributes:

- an absolute *data time* (~tstart~) expressed as ticks of the hardware
  clock.  For protodune-SP this is the 50 MHz clock.

- a relative *data time span* (~tspan~) also expressed as ticks in the
  hardware clock.

- an absolute *wall clock* time (~created~) which represents the number of
  microseconds from the Unix epoch.  The function ~zclock_usecs()~
  should be used in setting it.


** Message content requirements

Messages /shall/ be constructed and emitted adhering to these
requirements (using [[https://www.ietf.org/rfc/rfc2119.txt][rfc 2119]] "may/shall/should" language):

- The ~tstart~ and ~tspan~ attributes of ~TPSet~ and ~TrigPrim~ shall be set
  from values derived from a clock common to data sources from which
  all PTMP messages are derived.  These values shall not rollover
  during the lifetime of PTMP endpoints.

- All ~TPSets~ shall be sent by their source strict ascending order as
  determined by their ~tstart~ attribute.

- The *time span* of a ~TPSet~ (~tsart~, ~tstart~ + ~tspan~) shall represent a
  contiguous time range of data that was consumed by the source in the
  production of the constituent ~TrigPrims~.  It may differ from the
  union of time spans of the constituent ~TrigPrims~.

- The time span of a ~TPSet~ emitted by a source shall not overlap with
  that of any other ~TPSet~ emitted from the source.

- Emission of a ~TPSet~ with no ~TrigPrims~ should be avoided.

- The ~created~ value shall hold the number of microseconds since the
  Unix epoch at which the ~TPSet~ was formed just prior to sending.  It
  should be set with from the value returned by ~zclock_usecs()~.  Host
  systems should synchronize system clocks with PTP or at least NTP.
  The ~created~ value may be used for monitoring real time latency.

- The ~count~ shall be incremented by one for each subsequently emitted
  ~TPSet~ from a source.  It may be used for detection of lost ~TPSets~.

- The ~detid~ should be set to a number uniquely identifying the portion
  of detector from which the ~TPSet~ was derived.  

** Schema evolution

It is of course critical for all PTMP endpoints to know what schema is
followed by the messages they consume.  This can be accomplished by
assuring consisted software versions of all active endpoints.  In a
mixed environment, it can be accomplished by asserting version strings
in the messages themselves and having version-specific message
handling code.  This handling may simply be to reject any messages
with unexpected versions.

Currently, PTMP messages are not explicitly versioned.  The first
schema evolution must contend with this.  The initial frame (holding ~0~
now) of a message may be used to indicate a new schema.

** Schema Changes

*** Frame level

Although protobuf serialization is rather fast, there are some
operations that need only partial serialization (eg, ~TPSorted~ only
needs ~tstart~).  A select few values could be identified for this kind
of fast routing and placed/copied outside the ~TPSet~ and either
serialized in a new, small protobuf object or directly into a ~zframe~.
In either case, they would reside in a frame prior to the frame
holding the full ~TPSet~.


*** Considered ~TPSet~ extensions

These suggestions are under consideration.

- ~type~ :: (~int~?) identify the source of a ~TPSet~.  This may be needed
            for ~TPSet~ consumers which subscribe to multiple sources
            and require source-dependent behavior to be applied to a
            ~TPSet~.
            
- ~tag~ :: (~int~? ~string~?) semantically categorize a ~TPSet~.  This may be
           required to convey summary information about a ~TPSet~ that
           is not otherwise derivable from current attributes.

*** Rejected ~TPSet~ extensions

These suggestions have been rejected for the given reasons.

- config ID :: such values are constant by construction throughout a
               DAQ "run" and thus may be specified through DAQ
               configuration

- APA ID :: this is redundant with channel and not undefined if a
            ~TPSet~ spans an APA.  It is also detector module specific.

- APA plane ID :: ibid.

- TP count :: implicitly held in the "~TPSet.tps~" attribute.

- first/last channels :: already supported and redundant with info in the collection of ~TrigPrims~.

- first/last channel time :: may be derived from collection of ~TrigPrims~.

- first/last time :: may be derived from collection of ~TrigPrims~.
