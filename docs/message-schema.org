#+title: PTMP Message Schema

* Schema description

PTMP messages are multi-frame ZeroMQ messages.  The first frame of any
PTMP message holds a 4 byte integer that identifies the schema
describing the remaining frames.  This integer may be referred to as
the message ID or the message schema version.  The supported messages
are described in the remainder of this document.

* Schema version 0

A *v0* message consists of one additional ZeroMQ frame holding a a
serialized representation of a ~TPSet~ object.  Serialization is
performed by protocol buffers according to the schema defined [[../ptmp/ptmp.proto][here]].
See the comments in that file and subsections below for details.

** Time values

~TPSet~ and its constituent ~TrigPrim~ objects have three time related
attributes:

- an absolute *data time* (~tstart~) expressed as ticks of the hardware
  clock.  For protodune-SP this is the 50 MHz clock.

- a relative *data time span* (~tspan~) also expressed as ticks in the
  hardware clock.

- an absolute *wall clock* time (~created~) which represents the number of
  microseconds from the Unix epoch.  The function ~ptmp::data::now()~
  should be used to set it.  Note, ~zclock_usecs()~ is *not* appropriate.

The check program ~test/check_clock.cc~ can be used to exercise some of
the possible clocks.

** Message content requirements

Messages /shall/ be constructed and emitted adhering to these
requirements (using [[https://www.ietf.org/rfc/rfc2119.txt][rfc 2119]] "may/shall/should" language):

- The ~tstart~ and ~tspan~ attributes of ~TPSet~ and ~TrigPrim~ shall be set
  from values derived from a clock common to data sources from which
  all PTMP messages are derived.  These values shall not rollover
  during the lifetime of PTMP endpoints.

- All ~TPSets~ shall be sent by their source strict ascending order as
  determined by their ~tstart~ attribute.

- The *time span* of a ~TPSet~ (~tsart~, ~tstart~ + ~tspan~) shall represent a
  contiguous time range of data that was consumed by the source in the
  production of the constituent ~TrigPrims~.  It may differ from the
  union of time spans of the constituent ~TrigPrims~.

- The time span of a ~TPSet~ emitted by a source shall not overlap with
  that of any other ~TPSet~ emitted from the source.

- Emission of a ~TPSet~ with no ~TrigPrims~ should be avoided.

- The ~created~ value shall hold the number of microseconds since the
  Unix epoch at which the ~TPSet~ was formed just prior to sending.  It
  should be set with from the value returned by ~ptmp::data::now()~
  (note ~zclock_usecs()~ is *not* appropriate).  Host systems should
  synchronize system clocks with PTP or at least NTP.  The ~created~
  value may be used for monitoring real time latency.

- The ~count~ shall be incremented by one for each subsequently emitted
  ~TPSet~ from a source.  It may be used for detection of lost ~TPSets~.

- The ~detid~ should be set to a number uniquely identifying the portion
  of detector from which the ~TPSet~ was derived.  


* Schema version 1 (in draft)

A new schema is needed to go beyond ~TPSet~'s "bag of TPs".  

** Requirements

*** Meta requirements

1. Minimize the number of top level message types.

2. Support partial message deserialization to access common attributes.

3. Differing concepts should not share identical names regardless of scope.

*** Header requirements

All messages provide a "header" object with attributes common to all
possible types of "payload" object which the message may also hold.  A
header object may be serialized independently from the payload.

Header object have attributes that shall be set to allow:

1. Detection of lost packets.

2. Measurement of latency of transport.

3. Identification of the "source" of the message payload in terms of:

   - identifier of the message producer algorithm or process .

   - the portion of the detector from which the message was derived.

   - the time span of detector data that was examined in deriving the message.

4. Determination of which DAQ instance or "partition" the message is part of.

*** Payload requirements 

The "payload" message contains essentially all other required
information not in the "header".

Payload objects shall satisfy these requirements:

1. Distinguish which types of information is provided prior to accessing that information

2. Provide information about three tiers of trigger info: TPs, TCs or TDs.

3. Allow a single or a combination of tiers to be populated in one message.

**** Trigger Primitive (TP)

The trigger primitive (TP) object represents TPC activity localized in
time and to one channel.  The object:

1. shall describe the extent of a contiguous time span and its
   association with a channel.
2. may summarize the ADC content sampled during that span.

**** Trigger Candidate (TC)

The trigger candidate (TC) object represents a potential and partial
reason to read the detector and is derived from a number of TPs.  The
object:

1. shall summarize a "rectangular" region spanning a contiguous space of
   time and channel.
2. shall summarize the set of detector sub-components covered by this
   span.
3. may refer to a collection of TP objects from which the span was
   derived.

**** Trigger Decision (TD)

The trigger decision (TD) represents a portion of buffered data that
shall be read out.  It expresses the portion in terms of channels and
digitization sampling time.  It may be derived from TC objects or
produced by other means.

1. shall describe the data to be read out in terms of a contiguous
   time span and a subset of a pre-defined set of detector components.

2. shall indicate a semantic category of origin (eg, to distinguish
   between a self-trigger decision derived from TCs from one derived
   from a source external from the detector data).

3. shall provide a priority value based on a predefined metric. 

4. may refer to TC and TP information from which it was derived.

*** Frame level

At the ZeroMQ message level, the *v1* PTMP message shall have three frames:



| frame   | notes                                |
|---------+--------------------------------------|
| Version | identifies the version of the schema |
|---------+--------------------------------------|
| Header  | payload-independent info             |
|---------+--------------------------------------|
| Payload | payload-specific info                |
|---------+--------------------------------------|

The Version is a 4 byte integer and equal to ~1~ for v1 schema.
The schema covering Header and Payload is in [[../src/ptmpng.proto]].

