#+title: PTMP

Prototype Trigger Message Passing for (proto)DUNE DAQ

* Introduction 

This package provides trigger message transport for the protoDUNE DAQ
prototype development toward full DUNE Far Detector DAQ.

A simple API is provided which hides details of the transport
mechanism.  The application simply sees sinks and/or sources of
trigger messages.  There are also autonomous "proxy" or "actor"
classes that provide low-level message handling functions which can
run in a background thread.  Driven by user configuration, a network
components may be defined.  This network may comprise a simple
source-to-sink pipeline or may be structured into a rich data flow
topology which may include redundant flow paths and intervening
filtering/processing with redundancy and load balancing, etc.  The
individual nodes comprising this network need not themselves be
complicated by this richness.

Message transport is based on ZeroMQ which provides robustness and
performance (see the section on throughput performance in the [[./docs/tuning.org][tuning]]
document).  ZeroMQ allows the PTMP network to exist over a mix of
transports (inter-thread, inter-process and inter-computer) as
determined by the configuration.  The payload message frames are
currently serialized using ProtoBuffer ([[./ptmp/ptmp.proto][schema]]).

As PTMP transport is based on "standard" ZeroMQ and ProtoBuffers nodes
may participate in the network which have been developed outside of
PTMP-proper and in programming languages of a developers choosing.
PTMP directly includes some examples developed in [[python/ptmp][Python]].

See also:

- [[https://github.com/brettviren/ptmp-tcs][ptmp-tcs]] a PTMP wrapper around trigger algorithms from [[https://github.com/dlast44/ProtoDuneTrigger][dlast44/ProtoDuneTrigger]]
- [[https://github.com/brettviren/shoreman][brettviren/shoreman]] a modified bash implementation of Foreman which adds simple performance profile data collection used in some tests of PTMP

* Status

This package now has basic functionality and is in use at protoDUNE.
Somewhat formal [[https://github.com/brettviren/ptmp/releases][releases]] are now made and should be used for
"production testing".  PTMP is being built as a binary UPS "product"
~ptmp~ and is deployed in this way at the protoDUNE DAQ.  See below for
installing from source.

See [[./docs/todo.org][To Do]] document for checklist and notes on future development and
also any [[https://github.com/brettviren/ptmp/issues][issues]].

[[https://travis-ci.org/brettviren/ptmp][https://travis-ci.org/brettviren/ptmp.svg?branch=master]]


* Installation 

PTMP provides compiled C++ applications and shared library as well as
a Python module.

** C++

The PTMP package should build with any reasonably up to date C++
compiler.  GCC 7 is used in development.  Prerequisite software
dependencies are:

- libzmq
- CZMQ
- protobuf 

Optional but very useful for generating [[docs/ptmper.org][ptmper]] configuration files:

- Jsonnet

On Debian-like systems you can supply the prerequisites with:

#+BEGIN_EXAMPLE
  $ sudo apt-get install -y \
         uuid-dev libsystemd-dev liblz4-dev libcurl4-nss-dev \
         libzmq5-dev libczmq-dev protobuf-compiler libprotobuf-dev
#+END_EXAMPLE

There is also a [[./installdeps.sh][script]] that may assist building the dependencies from
their sources.  

With prerequisites available, issue:

#+BEGIN_EXAMPLE
  $ alias waf=`pwd`/tools/waf       # (1)
  $ waf --prefix=<path> configure   # (2)
  $ waf build --notests             # (3) 
  $ ls <path>/{lib,include,bin}/    # (4)
  $ waf -j1 --alltests              # (5) 
  $ waf install                     # (6)
#+END_EXAMPLE 

Notes:

1. [[https://waf.io][Waf]] is like ~make~.  It's equivalent to a ~Makefile~ is [[./wscript]].  A copy is included under the [[./tools/]] directory.
2. The ~--prefix~ gives an installation directory.  Additional ~--with-*~ options may be needed for configure to find external dependencies.  See ~waf --help~ for a list.
3. Build with ~--notests~ in order to avoid running tests in parallel.
4. Result may be immediately used in-place under the ~build/~ directory.
5. Run tests with ~-j1~ to enforce serial tests.  If run in parallel, some test may try to use the same ports.  Some tests run many minutes depending on the speed and number of CPUs available.  Some may run forever when problems occur.
6. Installing into the directory given by ~--prefix~.  This will be required if other packages depending on PTMP are to be built (eg [[https://github.com/brettviren/ptmp-tcs][ptmp-tcs]].

See [[./docs/ups.org]] for special support for building in the UPS
ecosystem.

As part of the build, a number of tests will be built and run.  See
the [[./docs/tuning.org][tuning]] document for some details on these tests.

** Python

The Python package provides a ~ptmp~ Python module and a number of
command line programs.  It is not required to use the C++ applications
and libraries.  It does provide some useful support (eg the ~ptmperpy~
CLI).  The package may be installed in usual Python ways.  My favorite
is:

#+begin_example
  $ python3 -m venv venv
  $ source venv/bin/activiate
  $ python setup.py develop
#+end_example


* Documentation

More documentation is in [[./docs]].  Some starting points:

- [[docs/apps.org][application development]]
- [[docs/configuration.org][end-user configuration]]
- [[./docs/tuning.org][tuning]] 
- [[docs/meta.org][meta]]
