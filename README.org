#+title: PTMP

Prototype Trigger Message Passing aka Pretty Temporary

* Introduction 

This package provides trigger messages transport for the protoDUNE DAQ
prototyping development toward full DUNE Far Detector DAQ.

A simple API is provided which hides details of the transport
mechanism.  The application simply sees a sink or a source of trigger
messages.  Driven by user configuration, an intervening network may be
defined.  This can be a simple sink-to-source pipeline or may be
structured into a rich data flow network which may include redundant
flow paths and intervening filtering/processing with redundancy and
load balancing.  The sink/source applications need not be complicated by this richness.

Message transport is based on ZeroMQ which provides robustness and
performance (see the section on throughput performance in the [[./docs/tuning.org][tuning]]
document).  Thus, the PTMP network may exist over a mix of transports
(inter-thread, inter-process and inter-computer) as determined by the
configuration.  The payload message frames are currently serialized
using protobuf ([[./ptmp/ptmp.proto][schema]]).


* Status

This package has basic functionality.  See [[./docs/todo.org][To Do]] document for checklist
and notes on future development. 

This button determines if recent builds and tests pass on Travis-CI:

[[https://travis-ci.org/brettviren/ptmp][file:https://travis-ci.org/brettviren/ptmp.svg]]

Note, a failure here is not necessarily indicative of a real problem.

* Installation 

The PTMP package should build with any reasonably up to date C++
compiler.  GCC 7 is used in development.  Prerequisite software
dependencies are:

- libzmq
- CZMQ
- protobuf (v2)

See the [[./.travis.yml][Travis-CI file]] for an ~apt~ installation line.  There is also a
[[./installdeps.sh][script]] to assist building the dependencies from source.  With
prerequisites available, issue:

#+BEGIN_EXAMPLE
  $ ./waf --prefix=<path> configure build install
  $ ls <path>/{lib,include,bin}/
#+END_EXAMPLE 

Replace ~<path>~ with a into which you want the software to install.  If
you want to just test it locally you may omit ~--prefix~ and the ~install~
command.

As part of the build, a number of tests will be built and run.  See
the [[./docs/tuning.org][tuning]] document for some details on these tests.

* Application Development

Application may be a "sender" or a "receiver" of trigger messages by
instantiating a ~TPSender~ or ~TPReceiver~, respectively, with their
configuration string.  These instances should be long-lived.  They are
/callable/ objects.  The sender will take a ~const TPSet&~ to read and
send to the network as a single message and the receiver takes a
non-const ~TPSet&~ to be filled when a message arrives.  The receiver
also takes an optional second argument which is a timeout in msec.  If
no message arrives w/in that time the call will return the value
~false~.  The receiver may ~throw std::runtime_error~ if a message is
received which can not be deserialized into the ~TPSet~ object.

The following applications provide reference applications.  Running
them without command line arguments will give a usage message.

- [[./test/check_send.cc][check_send]] :: send empty ~TPSet~ via ~ipc~ or ~tcp~ in a simple manner.
- [[./test/check_send.cc][check_send_rates]] :: a more sophisticated version of the above which
     adds a model for inter-message timing variability as well as
     filling ~TPSet~ with some number of actual TPs.
- [[./test/check_recv.cc][check_recv]] :: receive messages via ~ipc~ or ~tcp~.  Works with either senders.
- [[./test/check_sendrecv.cc][check_sendrecv]] :: a self contained sender+receiver that can use
     ~inproc~ as well as ~ipc~ or ~tcp~.

Application programmers (and possibly their users) should also read
the section [[Configuration]] below.

* Configuration

The PTMP API classes require a string which will be used to configure
the connection to the PTMP network.  This string *must* be provided by
the application.  The application may of course hard-wire it or allow
the application user to provide it.

This string is in JSON format and expressing a object (dictionary)
with the following attributes (currently just one).

- socket :: a socket configuration object.

Additional attributes may be added in the future.  The ~socket~ object
has the following attributes:

- type :: a ZeroMQ socket type name ("PAIR", "PUB", "SUB", etc)
- bind :: an array of addresses in canonical ZeroMQ form that the socket should bind
- connect :: an array of addresses in canonical ZeroMQ form that the socket should connect

The usual ZeroMQ restrictions apply.  For example a PAIR socket may
only bind or connect to one address.  Others can bind or connect to
multiple addresses.

* Tuning and Exception Handling

The document [[./docs/tuning.org][tuning]] collects some information that will help
understand how the PTMP network behaves, where things can be tuned to
meet different goals and also some known features of a high
performance, asynchronous communication network that are best taken
into account.

